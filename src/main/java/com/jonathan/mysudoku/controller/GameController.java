package com.jonathan.mysudoku.controller;
import com.jonathan.mysudoku.model.SudokuBoard;
import com.jonathan.mysudoku.model.SudokuGames;
import com.jonathan.mysudoku.view.alert.AlertBox;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.geometry.Pos;
import javafx.scene.control.TextField;
import javafx.scene.input.KeyCode;
import javafx.scene.input.KeyEvent;
import javafx.scene.layout.GridPane;
import javafx.scene.text.Font;
import javafx.scene.text.FontWeight;

/**
 * This class is the controller for the Sudoku game. It handles user interactions with the game stage and interacts with the model classes (SudokuGames and SudokuBoard).
 * @author Jonathan Aristizabal
 * @version 1.0
 */
public class GameController {
    /**
     * Grid pane element that will be the sudoku board in the UI.
     */
    @FXML
    private GridPane sudokuGridPane;
    /**
     * Object SudokuGames to get the sudoku games.
     */
    private SudokuGames sudokuGame;

    /**
     * Handles the click event on "Limpiar todo" button. It clears the board.
     * @param event The ActionEvent generated by the button click.
     */
    @FXML
    void onClickButtonClearGame(ActionEvent event) {
        sudokuGridPane.getChildren().clear();
        populateGrid();
        initializeGame(0);
    }

    /**
     * Handles the click event on "?" button. It pops an alert box with the game instructions.
     * @param event The ActionEvent generated by the button click.
     */
    @FXML
    void onClickShowInstructions(ActionEvent event) {
        new AlertBox().showInfo("Sudoku","Instrucciones:","Completa cada sección 3x3 con números del 1 al 9, recuerda\nque estos no pueden repetirse en la misma sección y tampoco\nen la misma columna o fila.");
    }

    /**
     * Handles the click event on "Nuevo Juego" button. It clears the board and gets a new board to play.
     * @param event The ActionEvent generated by the button click.
     */
    @FXML
    void onClickButtonNewGame(ActionEvent event) {
        sudokuGridPane.getChildren().clear();
        populateGrid();
        initializeGame(1);
    }

    /**
     * Method that sets the numbers for the sudoku game in TextFields in the GridPane.
     * @param instruction int value. 0=sets the same game (Limpiar todo button). 1=sets a new game (New game button).
     */
    private void initializeGame(int instruction){
        sudokuGame=new SudokuGames(instruction);
        Font font=Font.font("Arial",FontWeight.BOLD,20);
        String focusedTextfield="-fx-background-color: #733702; "+"-fx-text-fill: #ffffff";
        String notFocusedTextfield="-fx-background-color: #A66617;"+"-fx-text-fill: #ffffff";
        int [][] initialGame=sudokuGame.getGame();
        int index=0;
        int aux;
        for(int i=0;i<9;i++){
            for(int j=0;j<9;j++){
                TextField textField=(TextField) sudokuGridPane.getChildren().get(index);
                String existingStyle=textField.getStyle();
                aux=initialGame[i][j];
                textField.setFont(font);
                textField.setEditable(false);

                if(aux!=0) {
                    textField.setText(String.valueOf(aux));
                    textField.setMouseTransparent(true);
                    textField.setFocusTraversable(false);
                    textField.setStyle(existingStyle+"-fx-text-fill: #d0caca;"+"-fx-background-color: #A66617 ");
                } else {textField.setText("");
                    textField.setStyle(existingStyle+"-fx-text-fill: #ffffff;"+"-fx-background-color: #A66617 ");
                }
                /**
                 * Event to highlight the focused textfield.
                 */
                textField.focusedProperty().addListener((observable,oldValue,newValue) -> {
                    if (newValue) {
                        textField.setStyle(existingStyle+focusedTextfield);
                    } else {
                        textField.setStyle(existingStyle+notFocusedTextfield);
                    }
                });
                index++;
            }
        }
    }

    /**
     * Method to fill the grid with TextFields that have styles to divide the board in 9 3x3 sections.
     */
    private void populateGrid() {
        for(int i=0;i<9;i++) {
            for (int j = 0; j < 9; j++) {


                Font font = Font.font("Arial", FontWeight.BOLD, 20);
                TextField sudokuTextField = new TextField();
                sudokuTextField.setPrefHeight(50);
                sudokuTextField.setPrefWidth(50);
                sudokuTextField.setFont(font);
                sudokuTextField.setAlignment(Pos.CENTER);
                sudokuTextField.setStyle("-fx-border-width:1; -fx-border-color: black;");
                sudokuTextField.setOnKeyPressed(this::handleKeyPress);


                if (i == 2 || i == 5) {
                    sudokuTextField.setStyle("-fx-border-width:1 1 3 1; -fx-border-color: black;");
                    if (j == 2 || j == 5) {
                        sudokuTextField.setStyle("-fx-border-width:1 3 3 1; -fx-border-color: black;");
                    }
                }
                if (j == 2 || j == 5) {
                    sudokuTextField.setStyle("-fx-border-width:1 3 1 1; -fx-border-color: black;");
                    if (i == 2 || i == 5) {
                        sudokuTextField.setStyle("-fx-border-width:1 3 3 1; -fx-border-color: black;");
                    }
                }
                sudokuGridPane.add(sudokuTextField,j,i);
            }
        }

    }

    /**
     * Handles the key events when pressing a key, it only accepts numbers from 1-9 and the backspace keycode.
     * @param event The KeyEvent generated by the keyboard.
     */
    private void handleKeyPress(KeyEvent event){
        Font font=Font.font("BRADLEY HAND ITC",FontWeight.EXTRA_BOLD,23);
        TextField cell=(TextField) event.getSource();
        String number= event.getText();
        String regex ="^[1-9]$";
        if(event.getCode()== KeyCode.BACK_SPACE){cell.setText("");}
        else {
            if (number.matches(regex)) {
                cell.setText(number);
                cell.setFont(font);
            } else {
                cell.setText(cell.getText());
            }
        }
    }

    /**
     * Handles the click event on "Comprobar" button. It communicates with SudokuBoard, checks the game and returns a value to give a message in an alert box.
     * @param event The ActionEvent generated by the button click.
     */
    @FXML
    void onClickCheckGame(ActionEvent event) {
        int[][] matrix=new int[9][9];
        int index=0;
        int number;
        for(int i=0;i<9;i++){
            for(int j=0;j<9;j++){
                TextField textField=(TextField) sudokuGridPane.getChildren().get(index);
                try{matrix[i][j]=Integer.parseInt(textField.getText());}
                catch (NumberFormatException exception){matrix[i][j]=0;}
                index++;
            }
        }
        SudokuBoard sudokuBoard=new SudokuBoard(matrix);
        int result=sudokuBoard.checkGame();
        switch (result){
            case 1:
                new AlertBox().showInfo("Sudoku","¡Revisa de nuevo!","Es posible que tengas números repetidos de manera horizontal y/o vertical.");
                break;
            case 2:
                new AlertBox().showInfo("Sudoku","¡Revisa de nuevo!","Es posible que tengas números repetidos de manera horizontal y/o vertical.");
                break;
            case 3:
                new AlertBox().showInfo("Sudoku","¡Alto ahí!","Llena todos los espacios vacíos antes de revisar el juego.");
                break;
            case 4:
                new AlertBox().showInfo("Sudoku","¡Revisa de nuevo!","Es posible que tengas números repetidos en las secciones 3x3.");
                break;
            case 5:
                new AlertBox().showInfo("Sudoku","¡Enhorabuena!","Eres un genio y has hallado la solución.");
                break;
        }
    }
}

